{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/FormButton/FormButton.tsx","redux/contacts/contacts-actions.ts","redux/contacts/contacts-selectors.ts","components/ContactForm/ContactForm.tsx","components/ContactList/ContactList.tsx","components/Filter/Filter.tsx","App.tsx","redux/contacts/contacts-reducer.ts","redux/store.ts","index.tsx","components/ContactList/ContactList.module.css","components/FormButton/FormButton.module.css","components/Filter/Filter.module.css"],"names":["module","exports","FormButton","type","onClick","disabled","children","allProps","className","s","button","addContact","createAction","name","phoneNumber","payload","id","uuid","deleteContact","changeFilter","getContacts","state","items","getFilteredContacts","filter","getFilter","contacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useSelector","dispatch","useDispatch","addContactToPhonebook","length","isInContacts","alert","initialValues","validationSchema","Yup","required","matches","onSubmit","values","resetForm","form","label","fieldInput","placeholder","component","validatorError","ContactList","list","map","item","itemName","itemPhone","size","Filter","onChange","e","target","value","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e327610d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__lTxOT\",\"label\":\"ContactForm_label__3234J\",\"fieldInput\":\"ContactForm_fieldInput__1AbF1\",\"validatorError\":\"ContactForm_validatorError__2V4dO\"};","import React, { FC } from 'react';\r\nimport s from './FormButton.module.css';\r\nimport { IButton } from '../../interfaces/IButton';\r\n\r\ninterface Props {\r\n   type?: string,\r\n  onClick?: () => void,\r\n  disabled?: boolean,\r\n  children?: any\r\n}\r\n\r\nconst FormButton: FC<Props> = ({\r\n  type = 'button',\r\n  onClick,\r\n  disabled = false,\r\n  children,\r\n  ...allProps\r\n}: IButton) => {\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={s.button}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      {...allProps}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FormButton;\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { v1 as uuid } from 'uuid';\r\n\r\nexport const addContact = createAction('contacts/add', (name: string, phoneNumber: string) => ({\r\n  payload: {\r\n    id: uuid(),\r\n    name,\r\n    phoneNumber,\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction<string>('contacts/delete');\r\n\r\nexport const changeFilter = createAction<string>('contacts/changeFilter');\r\n","import IState from '../../interfaces/IState';\r\n\r\nexport const getContacts = (state: IState) => state.items;\r\n\r\nexport const getFilter = (state: IState) => state.filter;\r\n\r\nexport const getFilteredContacts = (state: IState) => {\r\n  const filter = getFilter(state);\r\n  const contacts = getContacts(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter((contact: any) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import * as Yup from 'yup';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FormButton from '../FormButton/FormButton';\r\nimport { addContact } from '../../redux/contacts/contacts-actions';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const isInContacts = (name: string) => {\r\n    name = name.toLowerCase();\r\n    return (\r\n      contacts.filter(contact => contact.name.toLowerCase().includes(name))\r\n        .length > 0\r\n    );\r\n  };\r\n\r\n  const addContactToPhonebook = ({ name, phoneNumber }: {name: string, phoneNumber: string}) => {\r\n    if (isInContacts(name)) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    dispatch(addContact(name, phoneNumber));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ name: '', phoneNumber: '' }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string()\r\n            .required()\r\n            .matches(\r\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n              \"Name can contain only letters, ', - and space.\",\r\n            ),\r\n          phoneNumber: Yup.string()\r\n            .required()\r\n            .matches(\r\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n              'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and starts with +',\r\n            ),\r\n        })}\r\n        onSubmit={(values, { resetForm }) => {\r\n          addContactToPhonebook(values);\r\n          resetForm();\r\n        }}\r\n      >\r\n        <Form className={s.form}>\r\n          <label className={s.label}>\r\n            Name:\r\n            <Field\r\n              className={s.fieldInput}\r\n              name=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"enter your name\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"name\"\r\n              component=\"span\"\r\n              className={s.validatorError}\r\n            />\r\n          </label>\r\n          <label className={s.label}>\r\n            Phone number:\r\n            <Field\r\n              className={s.fieldInput}\r\n              name=\"phoneNumber\"\r\n              type=\"tel\"\r\n              placeholder=\"enter your phone number\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"phoneNumber\"\r\n              component=\"span\"\r\n              className={s.validatorError}\r\n            />\r\n          </label>\r\n          <FormButton type=\"submit\">Add contact</FormButton>\r\n        </Form>\r\n      </Formik>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n","import { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport FormButton from '../FormButton';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport React from 'react';\r\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\r\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\r\nimport s from './ContactList.module.css';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, phoneNumber }) => (\r\n        <li key={id} className={s.item}>\r\n          <span className={s.itemName}>{name}</span>\r\n          <span className={s.itemPhone}>{phoneNumber}</span>\r\n          <FormButton\r\n            onClick={() => dispatch<any>(deleteContact(id))}\r\n            aria-label=\"Delete contact\"\r\n          >\r\n            <MdDelete size=\"18\" />\r\n          </FormButton>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div>\r\n      <label>\r\n        Find contacts by name:\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          onChange={e => {\r\n            dispatch(changeFilter(e.target.value));\r\n          }}\r\n          className={s.fieldInput}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import { addContact, changeFilter, deleteContact } from './contacts-actions';\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\ntype contactType = {\r\n  id: string;\r\n  name: string;\r\n  number: string;\r\n};\r\n\r\nconst state: contactType[] = []\r\n\r\nconst items = createReducer(state, {\r\n  [addContact.type]: (state, { payload }) => [payload, ...state],\r\n  [deleteContact.type]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter.type]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n\r\n","import {\r\n  FLUSH,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n  REHYDRATE,\r\n  persistReducer,\r\n  persistStore,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst LOCAL_STORAGE_CONTACTS = 'contacts';\r\n\r\nconst contactsPersistConfig = {\r\n  key: LOCAL_STORAGE_CONTACTS,\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: persistReducer(contactsPersistConfig, contactsReducer),\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport {store, persistor} from './redux/store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3I1dW\",\"item\":\"ContactList_item__gjmf6\",\"itemName\":\"ContactList_itemName__2A5rS\",\"itemPhone\":\"ContactList_itemPhone__WZxvo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FormButton_button__3zcUw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput___fBks\"};"],"sourceRoot":""}