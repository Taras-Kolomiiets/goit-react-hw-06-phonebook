{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/FormButton/FormButton.tsx","redux/contacts/contacts-actions.ts","redux/contacts/contacts-selectors.ts","components/ContactForm/ContactForm.tsx","components/ContactList/ContactList.tsx","components/Filter/Filter.tsx","App.tsx","redux/contacts/contacts-reducer.ts","redux/store.ts","index.tsx","components/ContactList/ContactList.module.css","components/FormButton/FormButton.module.css","components/Filter/Filter.module.css"],"names":["module","exports","FormButton","type","onClick","disabled","children","allProps","className","s","button","addContact","createAction","name","phoneNumber","payload","id","uuid","deleteContact","changeFilter","getContacts","state","items","getFilteredContacts","filter","getFilter","contacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useSelector","dispatch","useDispatch","addContactToPhonebook","length","isInContacts","alert","initialValues","validationSchema","Yup","required","matches","onSubmit","values","resetForm","form","label","fieldInput","placeholder","component","validatorError","ContactList","list","map","item","itemName","itemPhone","size","Filter","onChange","e","target","value","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.94b14531.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"fieldInput\":\"ContactForm_fieldInput__3zV51\",\"validatorError\":\"ContactForm_validatorError__3ngg1\"};","import React, { FC } from 'react';\nimport s from './FormButton.module.css';\nimport { IButton } from '../../interfaces/IButton';\n\ninterface Props {\n   type?: string,\n  onClick?: () => void,\n  disabled?: boolean,\n  children?: any\n}\n\nconst FormButton: FC<Props> = ({\n  type = 'button',\n  onClick,\n  disabled = false,\n  children,\n  ...allProps\n}: IButton) => {\n  return (\n    <button\n      type={type}\n      className={s.button}\n      disabled={disabled}\n      onClick={onClick}\n      {...allProps}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default FormButton;\n\n","import { createAction } from '@reduxjs/toolkit';\nimport { v1 as uuid } from 'uuid';\n\nexport const addContact = createAction('contacts/add', (name: string, phoneNumber: string) => ({\n  payload: {\n    id: uuid(),\n    name,\n    phoneNumber,\n  },\n}));\n\nexport const deleteContact = createAction<string>('contacts/delete');\n\nexport const changeFilter = createAction<string>('contacts/changeFilter');\n","import IState from '../../interfaces/IState';\n\nexport const getContacts = (state: IState) => state.items;\n\nexport const getFilter = (state: IState) => state.filter;\n\nexport const getFilteredContacts = (state: IState) => {\n  const filter = getFilter(state);\n  const contacts = getContacts(state);\n\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter((contact: any) =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import * as Yup from 'yup';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormButton from '../FormButton/FormButton';\nimport { addContact } from '../../redux/contacts/contacts-actions';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const isInContacts = (name: string) => {\n    name = name.toLowerCase();\n    return (\n      contacts.filter(contact => contact.name.toLowerCase().includes(name))\n        .length > 0\n    );\n  };\n\n  const addContactToPhonebook = ({ name, phoneNumber }: {name: string, phoneNumber: string}) => {\n    if (isInContacts(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(name, phoneNumber));\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', phoneNumber: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .required()\n            .matches(\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              \"Name can contain only letters, ', - and space.\",\n            ),\n          phoneNumber: Yup.string()\n            .required()\n            .matches(\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and starts with +',\n            ),\n        })}\n        onSubmit={(values, { resetForm }) => {\n          addContactToPhonebook(values);\n          resetForm();\n        }}\n      >\n        <Form className={s.form}>\n          <label className={s.label}>\n            Name:\n            <Field\n              className={s.fieldInput}\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"enter your name\"\n            />\n            <ErrorMessage\n              name=\"name\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <label className={s.label}>\n            Phone number:\n            <Field\n              className={s.fieldInput}\n              name=\"phoneNumber\"\n              type=\"tel\"\n              placeholder=\"enter your phone number\"\n            />\n            <ErrorMessage\n              name=\"phoneNumber\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </Form>\n      </Formik>\n      <hr />\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport FormButton from '../FormButton';\nimport { MdDelete } from 'react-icons/md';\nimport React from 'react';\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, phoneNumber }) => (\n        <li key={id} className={s.item}>\n          <span className={s.itemName}>{name}</span>\n          <span className={s.itemPhone}>{phoneNumber}</span>\n          <FormButton\n            onClick={() => dispatch<any>(deleteContact(id))}\n            aria-label=\"Delete contact\"\n          >\n            <MdDelete size=\"18\" />\n          </FormButton>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport s from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <label>\n        Find contacts by name:\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={e => {\n            dispatch(changeFilter(e.target.value));\n          }}\n          className={s.fieldInput}\n        />\n      </label>\n    </div>\n  );\n}\n","import './App.css';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { addContact, changeFilter, deleteContact } from './contacts-actions';\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\ntype contactType = {\n  id: string;\n  name: string;\n  number: string;\n};\n\nconst state: contactType[] = []\n\nconst items = createReducer(state, {\n  [addContact.type]: (state, { payload }) => [payload, ...state],\n  [deleteContact.type]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter.type]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter });\n\n","import {\n  FLUSH,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  REHYDRATE,\n  persistReducer,\n  persistStore,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport storage from 'redux-persist/lib/storage';\n\nconst LOCAL_STORAGE_CONTACTS = 'contacts';\n\nconst contactsPersistConfig = {\n  key: LOCAL_STORAGE_CONTACTS,\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: persistReducer(contactsPersistConfig, contactsReducer),\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport {store, persistor} from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"itemName\":\"ContactList_itemName__3linx\",\"itemPhone\":\"ContactList_itemPhone__2aABR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FormButton_button__2-gNS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput__1at_C\"};"],"sourceRoot":""}